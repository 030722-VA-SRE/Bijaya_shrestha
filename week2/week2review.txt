Explain what SQL is. What are some SQL databases?
SQL stands for Structured Query Language which is basically a language used by databases. This language allows to handle the information using tables and shows a language to query these tables and other objects related (views, functions, procedures, etc.).
Some SQL databases are SQL Server, Oracle, PostgreSQL, MySQL,  and MariaDB.
* How is data structured in a SQL database?
	In SQL database consists of tables with rows and columns. 

* What is an ERD? How is it useful?
ERD Entity Relationship Diagram is a type of flowchart that illustrates how “entities” such as people, objects or concepts relate to each other within a system. ER Diagrams are most often used to design or debug relational databases in the fields of software engineering, business information systems, education and research. 
An entity relationship diagram describes how entities relate to each other. In simple terms, it’s a picture or a framework of your business or a certain business process.
* What are the different multiplicity relationships? How would you create these relations?
There are four types of multiplicities: one-to-one, one-to-many, many-to-one, and many-to-many.
 We create these relations by analyzing the relationship between entities. For example, one fleet may include multiple airplanes, while one commercial airplane may contain zero to many passengers.

* What kind of relationship would exist between Students and Classes? Students and Textbooks?
It would have all kinds of multiplicity relationships. For instance, many students have one class, and one student has many classes. 
* Explain the concept of referential integrity.
Referential integrity refers to the relationship between tables (records). Referential integrity requires that a foreign key must have a matching primary key or it must be null. 
* What is a cascade delete?
A foreign key with cascade delete means that if a record in the parent table is deleted, then the corresponding records in the child table will automatically be deleted. This is called a cascade delete in SQL Server.
   
* List the integrity constraints
Three types of integrity constraints are an inherent part of the relational data model: 
entity integrity: It is one of the primary rules of effective database construction. It refers to the process of enforcing a primary key for each table in a database, where the key must be either a row or a combination of rows that are unique non-null values. To ensure entity integrity, it is required that every table have a primary key. Neither the PK nor any part of it can contain null values. 
 referential integrity: Referential integrity refers to the relationship between tables (records). Referential integrity requires that a foreign key must have a matching primary key or it must be null. 
 and domain integrit: Domain restricts the values of attributes in the relation and is a constraint of the relational model.
    
* Define the word "schema" .
A database schema defines how data is organized within a relational database; this is inclusive of logical constraints such as, table names, fields, data types, and the relationships between these entities    
* What is a candidate key? What about a surrogate key?
Candidate(super) key is a kind of key with no redundant attribute. Candidate keys are selected from the set of super keys, the only thing we take care while selecting candidate key is that the candidate key should not have any redundant attributes.
A surrogate key is a key which does not have any contextual or business meaning. It is manufactured “artificially” and only for the purposes of data analysis. 
 ### Sublanguages & Queries
* What are the 5 sublanguages of SQL? List some commands for each
DDL : create, drop, alter, truncate
DML: Insert,update, delete
DCL : Grant, Revoke
TCL: Commit, Rollback, save point.
DQL : select

* What is the difference between DELETE, DROP, and TRUNCATE commands?
    Delete: is it use to remove one or more row from a table. 
Drop: it is use in deleting both the structure and record stored in the table.
Truncate: is it use in deleting all rows from the table and free the space in the table.
Note: https://www.javatpoint.com/dbms-sql-command
* What are some SQL clauses you can use with SELECT statements?
  Some SQL clauses that goes with SELECT statements are where, group by, order by , from.

* What is the difference between joins and set operators?
Set operators - Comparison is to be performed on Tables. Set operators are used to join the results of two (or more) SELECT statements.
Join- Comparison is to performed on rows of tables. JOIN in SQL is used to combine data from many tables based on a matched condition between them.
* What are the types of joins? Explain the differences.
 A SQL Join statement is used to combine data or rows from two or more tables based on a common field between them. Different types of Joins are:
INNER JOIN: selects all rows from both the tables as long as the condition satisfies.
LEFT JOIN: This join returns all the rows of the table on the left side of the join and matching rows for the table on the right side of join. 
RIGHT JOIN: returns all the rows of the table on the right side of the join and matching rows for the table on the left side of join. 
FULL JOIN : creates the result-set by combining result of both LEFT JOIN and RIGHT JOIN.


* Explain the difference between UNION, UNION ALL, and INTERSECT.
Union : UNION in SQL is used to combine the result-set of two or more SELECT statements. The data combined using UNION statement is into results into new distinct rows.
UNION ALL : combines two or more result sets into a single set, including all duplicate rows.
INTERSECT:  takes the rows from both the result sets which are common in both.



 ### Transactions

* What are the properties a transaction must follow?
ACID : Atomicity, Consistency, Isolation and Durability:
 Atomicity - each statement in a transaction (to read, write, update or delete data) is treated as a single unit. Either the entire statement is executed, or none of it is executed. This property prevents data loss and corruption from occurring if, for example, if your streaming data source fails mid-stream.
Consistency - ensures that transactions only make changes to tables in predefined, predictable ways. Transactional consistency ensures that corruption or errors in your data do not create unintended consequences for the integrity of your table.
Isolation - when multiple users are reading and writing from the same table all at once, isolation of their transactions ensures that the concurrent transactions don’t interfere with or affect one another. Each request can occur as though they were occurring one by one, even though they're actually occurring simultaneously.
Durability - ensures that changes to your data made by successfully executed transactions will be saved, even in the event of system failure.

* Explain the different isolation levels. What read phenomena do each prevent?
Isolation determines how transaction integrity is visible to other users and systems. It means that a transaction should take place in a system in such a way that it is the only transaction that is accessing the resources in a database system. 
Dirty Read – A Dirty read is a situation when a transaction reads data that has not yet been committed. 
Non Repeatable read – Non Repeatable read occurs when a transaction reads the same row twice and gets a different value each time. 
Phantom Read – Phantom Read occurs when two same queries are executed, but the rows retrieved by the two, are different
Notes: https://www.geeksforgeeks.org/transaction-isolation-levels-dbms/


### Practicals

Given the following table 'employees'...

| id | firstName | lastName | salary | dept |
| --- | -------- | -------- | ------ | ---- |
| 1  | Michael   | Scott    | 65     | Sales|
| 2  | Dwight    | Schrute  | 75     | Sales|
| 3  | Toby      | Flenderson| 80    | HR  |
| 4  | Jim       | Halpert  | 90     | Sales|
| 5  | Oscar     | Martinez | 90     | Accounting |
| 6  | Angela    | Martin   | 75     | Accounting |
| 7  | Kevin     | Malone   | 70     | Accounting |
| 8  | Holly     | Flax     | 60     | HR |
| 9  | Creed     | Branton  | 70     | Quality Assurance |

* Write a query to find all data in the table
       Select * from employees;
* Write a query to find employees with a salary over 75
       Select firstName, lastName from employees where salary > 75;
* Write a query to find employees whose first name contains an 'e' or whose last name begins with 'S'\
Select firstname, lastName from employees as E where E.firstName like ‘%e%’ or E.lastName like ‘S%’ ;
* Write a query to find the first name of all employees who do not work in accounting
       Select firstName from employees  as E where E.dept <> Accounting;
* Write a query to find the average salary of all employees whose last names begin with 'M'
       Select AVG(salary) as firstName, lastName from employees where lastName like ‘M%’
* Write a query to find the highest paid salesperson
	Select MAX(salary) as Firstname, lastname from employees.
* Write a query to combine the resultsets of any two previous queries
Select AVG(salary) as firstName, lastName from employees where lastName like ‘M%’
UNION
Select firstName from employees  as E where E.dept <> Accounting;

* Remove all members of accounting from the database
       Delete from employees  where dept = ‘accounting’;

* Given removing the dept column from the employees table and creating a table 'department' and linking the two via a foreign key relationship

| dept_id | name |
| ------- | ---  |
| 1       | Sales |
| 2       | HR   |
| 3       | Accounting |
| 4       | Customer Service |

* Write a query to find the salary of the lowest paid salesperson (HINT: use a join)
Select MIN(salary) as salary from employees join department .
* Write a query to find the average salary of each department
Select AVG(salary) as salary from department.
* Write a query to find all possible combinations of employees and departments. How many records do you expect?

* Change the name of department 4 to 'Quality Assurance'
Alter table departments;
RENAME column Customer service to Quality Assurance;
* Remove both tables
Truncate  table employees, departments;

# JDBC
1. What is JDBC?
DBC is an abbreviation for the term Java Database Connection. JDBC is a software tool, also known as an application programming interface, that establishes a connection between a standard database and Java application that intends to use that database.
2. What are the core interfaces / classes in JDBC?
The java.sql package contains classes and interfaces for JDBC API. A list of popular interfaces of JDBC API are given below:
Driver interface
Connection interface
Statement interface
PreparedStatement interface
CallableStatement interface
ResultSet interface
ResultSetMetaData interface
DatabaseMetaData interface
RowSet interface
A list of popular classes of JDBC API are given below:
DriverManager class
Blob class
Clob class
Types class
3. What is a stored procedure and how would you call it in Java?
We can use JDBC API to handle database using Java program and can perform the following activities:
Connect to the database
Execute queries and update statements to the database
Retrieve the result received from the database.
I call it in java using PreparedStatement and connection interface.

4. What is the difference between Statement and PreparedStatement?
Statement will be used for executing static SQL statements and it can't accept input parameters. PreparedStatement will be used for executing SQL statements many times dynamically. It will accept input parameters.
Steps to executing an SQL query using JDBC? 
In general, to process any SQL statement with JDBC, you follow these steps:
Establishing a connection.
Create a statement.
Execute the query.
Process the ResultSet object.
Close the connection.
This page uses the following method, CoffeesTable.viewTable, from the tutorial sample to demonstrate these steps. This method outputs the contents of the table COFFEES. This method will be discussed in more detail later in this tutorial:
  public static void viewTable(Connection con) throws SQLException {
    String query = "select COF_NAME, SUP_ID, PRICE, SALES, TOTAL from COFFEES";
    try (Statement stmt = con.createStatement()) {
      ResultSet rs = stmt.executeQuery(query);
      while (rs.next()) {
        String coffeeName = rs.getString("COF_NAME");
        int supplierID = rs.getInt("SUP_ID");
        float price = rs.getFloat("PRICE");
        int sales = rs.getInt("SALES");
        int total = rs.getInt("TOTAL");
        System.out.println(coffeeName + ", " + supplierID + ", " + price +
                           ", " + sales + ", " + total);
      }
    } catch (SQLException e) {
      JDBCTutorialUtilities.printSQLException(e);
    }
  }

# AWS

### Cloud / AWS Overview
* How would you describe AWS? What is "the cloud" or "cloud computing" and why is it so popular now?

* Define Infrastructure, Platform, and Software as a Service
 SaaS, PaaS, and IaaS are simply three ways to describe how you can use the cloud for your business.
IaaS: cloud-based services, pay-as-you-go for services such as storage, networking, and virtualization.
PaaS: hardware and software tools available over the internet.
SaaS: software that’s available via a third-party over the internet.	

* What's the difference between a Region and an Availability Zone (AZ)?
	A region is a geographic location where every data center inside the region is called an availability zone, AZ in short. Every AZ is labeled with a letter a, b, c, …
Every availability zone in a region is supposed to have separate power supply as well as a separate internet connection.
For example, AWS Region eu-central-1 has three availability zones eu-central-1a,1b,1c.

 
* How are you charged for using AWS services? Does it vary by service?
 AWS pricing is similar to how you pay for utilities like water and electricity. You only pay for the services you consume, and once you stop using them, there are no additional costs or termination fees.
* Different ways to interact with AWS services?
CLI and SDK

### EC2

* What are the configuration options for EC2?
EC2Config starts when the instance boots and performs tasks during startup and each time you stop or start the instance.
 
* What are the different EC2 instance sizes/types?
General purpose: Mac, T4g, t3, t2..
Compute Optimized: C7g, C5, C6i, C6a..
Memory optimized: R6g, R6i,R5n….
Accelerated computing: P1, P2,, G5,F1, VT1…
Storage Optimized: IM4gn, I4i, I3, D2…

 
* Once you create an EC2, how to connect to it?
        To connect to ec2 : ssh -I file.pem ec2-user@ aws-endpoint.

* What are Security Groups? When defining a rule for a security group, what 3 things do you need to specify?
  A security group acts as a virtual firewall for your EC2 instances to control incoming and outgoing traffic. Inbound rules control the incoming traffic to your instance, and outbound rules control the outgoing traffic from your instance. When you launch an instance, you can specify one or more security groups.

* What's the difference between scalability, elasticity, and resiliency?
https://www.geeksforgeeks.org/scalability-and-elasticity-in-cloud-computing/
The Elasticity refers to the ability of a cloud to automatically expand or compressed the infrastructural resources on a sudden-up and down in the requirement so that the workload can be managed efficiently. This elasticity helps to minimize infrastructural cost. This is not applicable for all kind of environment, it is helpful to address the only those scenarios where the resources requirements fluctuate up and down suddenly for a specific time interval. 
 Consider you are the owner of a company whose database size was small in earlier days but as time passed your business does grow and the size of your database also increases, so in this case you just need to request your cloud service vendor to scale up your database capacity to handle a heavy workload.
It is totally different from what you have read above in Cloud Elasticity. Scalability is used to fulfill the static needs while elasticity is used to fulfill the dynamic need of the organization. Scalability is a similar kind of service provided by the cloud where the customers have to pay-per-use. So, in conclusion, we can say that Scalability is useful where the workload remains high and increases statically.
Application resilience is the ability of an architecture to continue providing the same quality of service even if some of its resources become inaccessible. For example, if one of your web servers falls over, the website continues to work properly. A resilient app is one that continues to function despite failures of system components. 
* Ways of paying for EC2?


### RDS

* What's an RDS?
Amazon Relational Database Service (RDS) is a collection of managed services that makes it simple to set up, operate, and scale databases in the cloud.

* Which vendors are supported?
Amazon RDS supports Amazon Aurora, MySQL, MariaDB, Oracle, SQL Server, and postgre SQL database engines.

# UNIX/LINUX

* What are the differences between a Thread and Process and a Service?
A thread shares information like data segment, code segment, files etc. with its peer threads while it contains its own registers, stack, counter etc. A process is a program under execution i.e an active program. A thread is a lightweight process that can be managed independently by a scheduler.
* Write a basic bash script 
    * ie: installing java/maven/git to an ec2
For java: sudo yum install java-1.8.0-openjdk-devel -y
For maven : sudo sed -i s/\$releasever/6/g /etc/yum.repos.d/epel-apache-maven.repo
sudo sed -i s/\$releasever/6/g /etc/yum.repos.d/epel-apache-maven.repo
sudo yum install -y apache-maven
For git : sudo yum install git
And to connect to ec2 : ssh -I file.pem ec2-user@ aws-endpoint.
    * if you're feeling ambitious, a script that would delete a file if it exists

